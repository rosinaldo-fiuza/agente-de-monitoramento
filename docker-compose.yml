version: '3.8'

services:
  backend:
    build: .
    ports:
      - "3000:3000"
    environment:
      # Configurações do servidor
      - PORT=3000
      - NODE_ENV=development
      
      # Configurações do RabbitMQ
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=admin
      - RABBITMQ_PASSWORD=a1b23fec99VMB
      - RABBITMQ_VHOST=/
      - RABBITMQ_QUEUE_DATA=agent_data
      - RABBITMQ_QUEUE_COMMANDS=agent_commands
      
      # Configurações do PostgreSQL
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=monitoring_dashboard
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
    depends_on:
      - postgres
      - rabbitmq
    restart: unless-stopped
    networks:
      - monitoring-network

  frontend:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./frontend:/usr/share/nginx/html
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - monitoring-network

  postgres:
    image: postgres:16-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=monitoring_dashboard
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./schema.sql:/docker-entrypoint-initdb.d/schema.sql
    restart: unless-stopped
    networks:
      - monitoring-network

  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=a1b23fec99VMB
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: unless-stopped
    networks:
      - monitoring-network

  agent:
    build:
      context: ./agent
      dockerfile: Dockerfile
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=admin
      - RABBITMQ_PASSWORD=a1b23fec99VMB
      - COLLECTION_INTERVAL=10
    depends_on:
      - rabbitmq
    restart: unless-stopped
    networks:
      - monitoring-network

networks:
  monitoring-network:
    driver: bridge

volumes:
  postgres_data:
  rabbitmq_data:
